q1 staff login
q2 admin crud users

summary: ONline Book Club (Dublin Book Clubs Online: DUBCO)

There are several book clubs using the site.
Each club has members - a member cannot be a member of more than one book club.
Each club has a set of 12 books for each year.
Each month the members of each club read and then post comments about a different book.


-----------------------
Use cases for role 'PUBLIC' (no login required)
-----------------------
Members of the public (no login needed) use cases:
- PUBLIC1: a non-logged-in site visitor can view general information pages (e.g. index / about / sitemap) -- DONE

- PUBLIC2.1: a summary list of this year's BOOKS (from all clubs) (crud list)
	TABLE-per-page
	users can sort the list by title / author / club name

	- when an item from the list is clicked:
		- PUBLIC2.2: the user will see the item details on a single page :: RECORD-per-page

- PUBLIC3.1: a summary list of all CLUBS (crud list)
	TABLE-per-page

	- when an item from the list is clicked:
		- PUBLIC3.2: the user will see the item details on a single page :: RECORD-per-page

-------
Use cases for role 'USER' - a login by any system user
-------

- USER1.1: (not a member of a club): Having logged in the user can see:
	- a list of clubs, with a button/link to requrest joining each club
	USER1.2: If a request was rejected, the user can see the reason given

- USER2: (already a member of a club) Having logged in the user can see:
	- the name of their club (which is a link to that clubs details)
	- a button/link to leave the club
	- the books for each month

- USER3.1: after clicking the club name link they can see:
	- details about the club, including a list of all members
	- USER3.2: a form to suggest a new book for next years selection

- USER4: after clicking a book they can see:
	- details about the book
	- any comments submitted by club members about the book
	- USER4.2: a form for the logged in user to submit a comment


-------
Use cases for role 'STAFF' - a login by user with ROLE_STAFF authentication
-------
for this site the STAFF user is the creator of each club - each STAFF user may only manage one club

- STAFF1: can CRUD details about the club

- STAFF2.1: can add/remove members of the club

	- STAFF2.2: see a list of users asking to join the club
		actions 
			- STAFF2.3: accept membership request - add to club
			- STAFF2.4: reject memership - STAFF user has to give a reason

- STAFF3.1/2 etc.:
	- use cases relating to setting the books for future years
	- including processing suggestions from members

-------
for all case studies there should be a ROLE_ADMIN who can CRUD users
(see starter project code & fixtures)
-------

    /**
     * @Route("/index", name="user_index", methods={"GET"})
     */
    public function index(UserRepository $userRepository): Response
    {
        return $this->render('user/index.html.twig', [
            'users' => $userRepository->findAll(),
        ]);
    }

    /**
     * @Route("/new", name="user_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($user);
            $entityManager->flush();

            return $this->redirectToRoute('user_index');
        }

        return $this->render('user/new.html.twig', [
            'user' => $user,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="user_show", methods={"GET"})
     */
    public function show(User $user): Response
    {
        return $this->render('user/show.html.twig', [
            'user' => $user,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="user_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, User $user): Response
    {
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('user_index');
        }

        return $this->render('user/edit.html.twig', [
            'user' => $user,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="user_delete", methods={"DELETE"})
     */
    public function delete(Request $request, User $user): Response
    {
        if ($this->isCsrfTokenValid('delete'.$user->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($user);
            $entityManager->flush();
        }

        return $this->redirectToRoute('user_index');
    }